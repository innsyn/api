/* Copyright 2019 Schibsted */

// 1. pre-process pdf with pdftosjon (better ordering than the default documentcloud output)
// 2. print out text elements to file/string
// 3. parse

/***
 *
 * Can parse:
 * Plan- og bygningsetaten Oslo
 *
 */
module.exports = {
  /***
   * The parse method for "Plan- og bygningsetaten" (Oslo) will extract data from the raw text generated by DocumentCloud
   * for a PDF.
   * To determine if the parser was able to parse the file, check the returnValue.parsed field
   * (true|false).
   */
  parse: function(raw) {
    var topDown = require('./topDownParser');

    try {
      var result = topDown.parse(raw, this.options);

      if (result.parsed) {
        // add expected fields (sender, receiver)
        for (var index = 0; index < result.items.length; index++) {
          var item = result.items[index];

          item.receiver = item.sender = '';
          item.documentType = item.senderOrReceiverLabel == 'Fra:' ? 'I' : 'U';
          /*
           * The lines array contains sender/receiver, case title and document title. Logic
           * below goes like:
           *
           * 3 elements: 1 sender/receiver, 1 case title, 1 document title
           * If more than 3 elements, the algorithm is plain guesswork based on manually finding
           * patterns in the raw text files. There will definitely be something off.
           * */

          var lines = item.senderOrReceiverAndCaseTitleAndDocumentTitle.split(
            '\n',
          );

          // remove empty elements
          lines = lines.filter(function(x) {
            return x !== (undefined || '');
          });

          // the first line is "guaranteed" to be sender/receiver
          var senderOrReceiver = lines.shift();

          // the last line is "guaranteed" to be the document title or a part of it
          item.documentTitle = lines.pop();

          if (item.senderOrReceiverLabel == 'Fra:') {
            // only one sender
            item.sender = senderOrReceiver;
          } else {
            // one or more receivers
            item.receiver = senderOrReceiver;
            while (lines.length > 3) {
              // pop until 3 lines left
              item.receiver = item.receiver + ' ' + lines.shift();
            }
          }

          // first line left should be the case title at this point
          item.caseTitle = lines.shift();

          // lines array should be 0, 1 or 2 elements now
          if (lines.length >= 1) {
            item.caseTitle = item.caseTitle + ' ' + lines.shift();
          }

          // prepend the rest of the elements to the document title
          while (lines.length > 0) {
            item.documentTitle = lines.shift() + ' ' + item.documentTitle;
          }

          item.documentDate = getDateFromString(item.documentDate);
          item.recordedDate = getDateFromString(item.recordedDate);
        }
        return {
          parsed: true,
          items: result.items,
        };
      }

      return result;
    } catch (e) {
      return { parsed: false, error: e };
    }

    /***
     * Converts a string with the format "dd.mm.yyyy" to a date object.
     */
    function getDateFromString(dateString) {
      try {
        if (dateString.length === 8) {
          var year = dateString.substring(4, 8);
          var month = dateString.substring(2, 4);
          var day = dateString.substring(0, 2);
        } else {
          return '';
        }
        /*
         Parse the date as a string to avoid one day offset
         http://stackoverflow.com/questions/7556591/javascript-date-object-always-one-day-off)
         */
        return new Date('"' + year + '/' + month + '/' + day + '"');
      } catch (e) {
        return '';
      }
    }
  },

  options: {
    fields: [
      {
        name: 'caseNumber',
        regexList: [/(\d{1,4}\/\d{1,6}-\d{1,4})/],
      },
      {
        name: 'senderOrReceiverAndCaseTitleAndDocumentTitle',
        regexList: [/Jour.dato:.*\n([\s\S]*?)Saksansv:/],
        allowNewLines: true,
      },
      {
        name: 'documentDate',
        regexList: [/Dok.dato:(.*)/],
      },
      {
        name: 'recordedDate',
        regexList: [/Jour.dato:(.*)/],
      },
      {
        name: 'senderOrReceiverLabel',
        regexList: [/(Til:|Fra:)/],
      },
      {
        name: 'caseOfficer',
        regexList: [/Saksbeh:(.*)/],
      },
      {
        name: 'caseResponsible',
        regexList: [/Saksansv:(.*)/],
      },
      {
        name: 'legalParagraph',
        regexList: [/Par.:(.*)/],
      } /*,
      {
        name: "documentType",
        regexList: [
          /\n(I|U|GU|MI|MU|V|S)\n/
        ]
      }*/,
    ],

    noise: [/DocuLive rapport[^]+?Periode:\n/g, /Side\d*/g],
  },
};
