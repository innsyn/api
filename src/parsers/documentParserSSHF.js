/* Copyright 2019 Schibsted */

/***
 *
 * Can parse:
 * SSHF
 *
 * duplicate of Bystyret - match for first 9 values, but different logic for classification
 */
module.exports = {
  /***
   * The parse method for "Bystyret" (Oslo) will extract data from the raw text generated by DocumentCloud
   * for a PDF.
   * To determine if the parser was able to parse the file, check the returnValue.parsed field
   * (true|false).
   */
  parse: function(raw) {
    var topDown = require('./topDownParser');

    try {
      var result = topDown.parse(raw, this.options);

      if (result.parsed) {
        for (var index = 0; index < result.items.length; index++) {
          var item = result.items[index];

          //split caseOfficer on / to give department and person as separate fields
          item.caseResponsible = '';

          if (item.caseOfficer.indexOf('/') > 0) {
            var caseParts = item.caseOfficer.split('/');
            item.caseResponsible = caseParts[0].trim();
            item.caseOfficer = caseParts[1].trim();
          }

          /*
           * add expected fields (sender, receiver) based on meta hits on labeling
           * senderOrReceiver: 'Rusel√∏kka/Skillebekk beboerforening',
           * senderOrReceiverLabel: 'Avsender:',
           */
          item.receiver = item.sender = '';

          if (item.senderOrReceiverLabel == 'Mottaker:') {
            item.receiver = item.senderOrReceiver;
            item.documentType = 'I';
          } else {
            item.sender = item.senderOrReceiver;
            item.documentType = 'U';
          }

          //adjust date format to date format
          item.documentDate = getDateFromString(item.documentDate);
          item.recordedDate = getDateFromString(item.recordedDate);
        }
        return {
          parsed: true,
          items: result.items,
        };
      }

      return result;
    } catch (e) {
      return { parsed: false, error: e };
    }

    /***
     * Converts a string with the format "dd.mm.yyyy" to a date object.
     */
    // from Kemner - move to helper used inside topDown?
    function getDateFromString(dateString) {
      try {
        if (dateString.length === 10) {
          var dateParts = dateString.split('.');
          var year = dateParts[2];
          var month = dateParts[1];
          var day = dateParts[0];
        } else {
          return '';
        }
        /*
         Parse the date as a string to avoid one day offset
         http://stackoverflow.com/questions/7556591/javascript-date-object-always-one-day-off)
         */
        return new Date('"' + year + '/' + month + '/' + day + '"');
      } catch (e) {
        return '';
      }
    }
  },

  options: {
    fields: [
      {
        name: 'caseNumber',
        regexList: [/(\d{2,4}\/\d{3,6}-\d{1,4})/],
      },
      {
        name: 'documentTitle',
        regexList: [/Dok.:([\s\S]*?)Sak:/],
      },
      {
        name: 'caseTitle',
        regexList: [/Sak:([\s\S]*?)(Mottaker|Avsender):/],
      },
      {
        name: 'senderOrReceiver',
        regexList: [/(?:Mottaker:|Avsender:)([\s\S]*?)Journaldato:/],
      },
      {
        name: 'senderOrReceiverLabel',
        regexList: [/(Mottaker:|Avsender:)/],
      },
      {
        name: 'documentDate',
        regexList: [/Dok. dato:([\s\S]*?)Arkivdel:/],
      },
      {
        name: 'recordedDate',
        regexList: [/Journaldato:([\s\S]*?)Tilg. kode:/],
      },
      {
        name: 'caseOfficer',
        regexList: [/Saksbehandler:([\s\S]*?)Dok./],
      },

      // SSHF tweaks - consider option to extend config? or add as extra regexp
      {
        name: 'classification',
        regexList: [/Klasse:([\s\S]*?)Dok.:/, /Klasse:\n\n(.*)/],
      },
      {
        name: 'legalParagraph',
        regexList: [/Tilg. kode:([\s\S]*?)Saksbehandler:/],
      },
    ],

    noise: [],
  },
};
