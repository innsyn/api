/* Copyright 2019 Schibsted */

// 1. pre-process pdf with pdftosjon (better ordering than the default documentcloud output)
// 2. print out text elements to file/string
// 3. parse

/***
 *
 * Can parse:
 * Næringsetaten Oslo
 *
 */
module.exports = {
  /***
   * The parse method for "Næringsetaten" will extract data from the raw text generated by DocumentCloud
   * for a PDF.
   * To determine if the parser was able to parse the file, check the returnValue.parsed field
   * (true|false).
   */
  parse: function(raw) {
    var helper = require('./../helpers/documentParserHelper');
    var topDown = require('./topDownParser');

    try {
      var result = topDown.parse(raw, this.options);

      if (result.parsed) {
        // add expected fields (legalParagraph, documentType, sender, receiver
        for (var index = 0; index < result.items.length; index++) {
          var item = result.items[index];

          item.receiver = item.sender = item.legalParagraph = '';

          if (item.documentTypeOrLegalParagraph.indexOf('§') !== -1) {
            item.legalParagraph = item.documentTypeOrLegalParagraph;
          }

          if (item.senderOrReceiverLabel == 'Mottaker:') {
            item.receiver = item.senderOrReceiver;
            item.documentType = 'U';
          } else {
            item.sender = item.senderOrReceiver;
            item.documentType = 'I';
          }

          item.documentDate = getDateFromString(item.documentDate);
          item.recordedDate = getDateFromString(item.recordedDate);
        }
        return {
          parsed: true,
          items: result.items,
        };
      }

      return result;
    } catch (e) {
      return { parsed: false, error: e };
    }

    /***
     * Converts a string with the format "dd.mm.yyyy" to a date object.
     */
    function getDateFromString(dateString) {
      var dateParts = dateString.split('.');

      try {
        var year = parseInt(dateParts[2]);
        var month = parseInt(dateParts[1]);
        var day = parseInt(dateParts[0]);
        /*
         Parse the date as a string to avoid one day offset
         http://stackoverflow.com/questions/7556591/javascript-date-object-always-one-day-off)
         */
        return new Date('"' + year + '/' + month + '/' + day + '"');
      } catch (e) {
        return '';
      }
    }
  },

  options: {
    fields: [
      {
        name: 'caseNumber',
        regexList: [
          /(\d{9}-\d{1,3})/,
          /Dok.:\n\n.*?(\d{1,5}\/\d{3,5}-\d{1,5})/,
        ],
      },
      {
        name: 'caseTitle',
        regexList: [/Sak:([\s\S]*?[Avsender|Mottaker].*)/],
      },
      {
        name: 'documentTitle',
        regexList: [/Dok.:([\s\S]*?)Sak:/],
      },
      {
        name: 'documentDate',
        regexList: [/Dok. dato:([\s\S]*?)Arkivdel/],
      },
      {
        name: 'recordedDate',
        regexList: [/Journaldato:([\s\S]*?)Tilg. kode:/],
      },
      {
        name: 'senderOrReceiver',
        regexList: [
          /Mottaker:([\s\S]*?)Journaldato:|Avsender:([\s\S]*?)Journaldato:/,
        ],
      },
      {
        name: 'senderOrReceiverLabel',
        regexList: [/(Mottaker:|Avsender:)/],
      },
      {
        name: 'caseOfficer',
        regexList: [/Saksbehandler:([\s\S]*?)Dok. dato/],
      },
      {
        name: 'documentTypeOrLegalParagraph',
        regexList: [/Tilg. kode:([^]+?)Saksbehandler/],
      },
    ],

    noise: [
      /Oslo Kommune Næringsetaten - Offentlig journal[^]+?Saksansvarlig:\n\nAlle\n/g,
    ],
  },
};
