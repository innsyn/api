/* Copyright 2019 Schibsted */

/***
 *
 * Can parse:
 * Forsvaret journals, made in DocuLive, high degree of "screened" data
 *
 */
module.exports = {
  /***
   * The parse method for "Forsvaret" will extract data from the raw text generated by DocumentCloud
   * for a PDF.
   * To determine if the parser was able to parse the file, check the returnValue.parsed field
   * (true|false).
   */
  parse: function(raw) {
    var helper = require('./../helpers/documentParserHelper');

    var items = [];
    var globalParsed = false;

    var cases = raw.split(/(\d{2,5}\/\d{3,9}-\d{1,5})/);

    //loop on two by two, grab id into resulting item post parse
    for (var i = 1; i < cases.length; i += 2) {
      var itemId = cases[i];
      var result = parseSingle(cases[i + 1], this.options);

      if (result) {
        //clean up data for DB, resolve ambiguity...
        globalParsed = true;

        var item = result;
        item.caseNumber = itemId;

        //adjust date format to date format
        item.documentDate = getDateFromString(item.documentDate);
        item.recordedDate = getDateFromString(item.recordedDate);

        //normalize for unknown doc types
        if (item.documentType == 'Andre opplysninger er avskjermet') {
          item.documentType = 'Avskj';
        }

        items.push(item);
      } else {
        // console.log("failed" + i);
        // if(i == 87 ) console.log(cases[i+1]);
      }
    }

    console.log(
      'total:' + cases.length + ' expected cases: ' + (cases.length - 1) / 2,
    );
    console.log('parsed: ' + items.length);

    //return the array of parsed items and status or default error message
    if (globalParsed) {
      return { parsed: true, items: items };
    }
    return {
      parsed: false,
      items: items,
      error: { message: 'No items found in source' },
    };

    /***
     * Uses the documentParserHelper method directly
     * todo: consider exposing this also as a helper function, since duplicated with UniBlue
     */
    function parseSingle(raw, options) {
      var result = {};
      options.fields.forEach(function(field) {
        var rawResult = helper.getValueFromString(raw, field.regexList);
        result[field.name] = field.allowNewLines
          ? rawResult
          : helper.removeNewLines(rawResult);
      });

      return result;
    }

    /***
     * Converts a string with the format "ddmmyy" to a date object.
     * todo: move generic function inside parserHelper? call with format style
     */
    function getDateFromString(dateString) {
      try {
        if (dateString.length === 6) {
          var year = '20' + dateString.substring(4, 6);
          var month = dateString.substring(2, 4);
          var day = dateString.substring(0, 2);
        } else {
          return '';
        }
        /*
         Parse the date as a string to avoid one day offset
         http://stackoverflow.com/questions/7556591/javascript-date-object-always-one-day-off)
         */
        return new Date('"' + year + '/' + month + '/' + day + '"');
      } catch (e) {
        return '';
      }
    }
  },

  options: {
    fields: [
      // {
      // Moved up to split into cases array
      //   name: "caseNumber",
      //   regexList: [
      //     /(20\d{3,9}-\d{1,4})/
      //   ]
      // },

      {
        name: 'caseTitle',
        regexList: [
          /(.+)[\s]*?Dok:/,
          /(Sakstittel er avskjermet)/,

          /(Andre opplysninger er avskjermet)/,
        ],
      },
      {
        name: 'documentTitle',
        regexList: [
          /Dok:\n[\s]*?(.*)\nSaksansv:/,
          /Dok:\n([\s\S]*?)Grad:/,
          /Dok:\n([\s\S]*?)Par.:/,

          /(Andre opplysninger er avskjermet)/,
        ],
      },
      {
        name: 'sender',
        regexList: [
          /Jour.dato: \d{6}\n(.+)\n/,

          /(Andre opplysninger er avskjermet)/,
        ],
      },
      // {
      //   name: "receiver",
      //   regexList: [
      //     /Til:\n(.+)\n/,
      //     /Til:\n([\s\S]*?)\nSak:/
      //   ]
      // },

      {
        name: 'documentDate',
        regexList: [
          /Dok.dato: (\d{6})/,
          /Dok.dato: (\d{6})\nJour.dato/,
          /Dok.dato:([\s\S]*?)Grad:/,
        ],
      },
      {
        name: 'recordedDate',
        regexList: [/Jour.dato: (\d{6})/, /Jour.dato:([\s\S]*?)Sek.kode:/],
      },

      {
        name: 'caseResponsible',
        regexList: [/Saksansv:(.+)/],
      },
      {
        name: 'caseOfficer',
        regexList: [
          /Saksbeh:[\s]*?(.+)[\s]*?20\d{3,9}/,
          /Saksbeh:[\s]*?(.+)[\s]*?Side/,
          /Saksbeh:(.+)/,
          /Saksbeh:[\s]*?(.+)/,
        ],
      },
      {
        name: 'documentType',
        regexList: [/\n(T|U|N|I|X)\n/, /(Andre opplysninger er avskjermet)/],
      },
      {
        name: 'classification',
        regexList: [/Grad:(.+)/],
      },
      {
        name: 'legalParagraph',
        regexList: [/Par.:(.+)/],
      },
    ],

    noise: [/Offentlig journal/g],
  },
};
